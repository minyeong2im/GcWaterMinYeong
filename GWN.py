import streamlit as st

# 김천시 상하수도요금표 딕셔너리
이용요금표 = {
    "상수도": {
        "가정용":[
            {"구간":20, "단가":420},
            {"구간":30, "단가":653},
            {"구간":40, "단가":813},
            {"구간":float("inf"), "단가":1072},
        ],
        "일반용":[
            {"구간":50, "단가":727},
            {"구간":100,"단가":960},
            {"구간":300,"단가":1096},
            {"구간":1000,"단가":1268},
            {"구간":float("inf"),"단가":1465}
        ],
        "대중탕용":[
            {"구간":1000,"단가":838},
            {"구간":1500,"단가":997},
            {"구간":2000,"단가":1183},
            {"구간":float("inf"),"단가":555}
        ],
        "전용공업용":[
            {"구간":200,"단가":321},
            {"구간":float("inf"),"단가":555},
        ],
        "산업용":[
            {"구간":200,"단가":444},
            {"구간":float("inf"),"단가":678}
        ],
        "겸업용":[
            {"구간":15,"단가":420},
            {"구간":float("inf"),"단가":420}
        ],
    },
    "하수도":{
        "가정용":[
            {"구간":20,"단가":264},
            {"구간":30,"단가":678},
            {"구간":40,"단가":810},
            {"구간":float("inf"),"단가":955}
        ],
        "일반용":[
            {"구간":50,"단가":352},
            {"구간":100,"단가":1015},
            {"구간":300,"단가":1074},
            {"구간":1000,"단가":1133},
            {"구간":float("inf"),"단가":1205}
        ],
        "대중탕용":[
            {"구간":1000,"단가":692},
            {"구간":1500,"단가":1308},
            {"구간":2000,"단가":1471},
            {"구간":float("inf"),"단가":1559}
        ],
        "전용공업용":[
            {"구간":200,"단가":279},
            {"구간":float("inf"),"단가":529},
        ],
        "산업용":[
            {"구간":200,"단가":279},
            {"구간":float("inf"),"단가":529},
        ],
        "겸업용":[
            {"구간":15,"단가":264},
            {"구간":float("inf"),"단가":264}
        ]
    }
}

기본요금표 = {
    13:1330,
    20:3700,
    25:5950,
    40:17880,
    50:27410,
    75:66550,
    100:113330,
    150:247010,
    200:309000,
    250:460280,
    300:572280,
}

물이용부담금_단가 = 170 # 물이용부담금 단가

# 매개변수 순서 기준잡기
# 업종:str
# 사용량: int
# 구경: int
# 세대수:int=1
# 하수도여부: bool=True
# 겸업여부: bool=False
# 주기: str="매월"
# 감면세대수: int=0

def rounddown_10(x: int) -> int:
    return (x//10) * 10

def 기본요금(구경: int, 주기: str="격월") -> int:
    매월_격월 = 2 if 주기 == "격월" else 1
    금액 = 기본요금표.get(구경, 0) * 매월_격월
    
    return 금액

def 이용요금계산(요율표_리스트: list, 사용량: int) -> int:
    요금 = 0
    이전 = 0
    남음 = 사용량
    
    for 단계 in 요율표_리스트:
        구간 = 단계["구간"]
        단가 = 단계["단가"]
        사용 = min(남음, 구간 - 이전)
        if 사용 > 0:
            요금 += 사용 * 단가
            남음 -= 사용
            이전 = 구간
        if 남음 <= 0:
            break
    return 요금

def 조정된_요율표(업종: str, 원본_리스트: list, 세대수: int=1,주기: str="격월") -> list:
    매월_격월 = 2 if 주기 == "격월" else 1
    변환된 = []
    for 단계 in 원본_리스트:
        구간 = 단계["구간"]
        단가 = 단계["단가"]
        
        if 구간 == float("inf"):
            실제구간 = float("inf")
        else:
            if 업종 in ["가정용", "겸업용"]:
                실제구간 = 구간 * 매월_격월 * 세대수
            else:
                실제구간 = 구간 * 매월_격월
    
        변환된.append({"구간": 실제구간, "단가": 단가})
    return 변환된

def 상수도요금(업종: str, 사용량: int, 세대수: int=1,주기: str="격월") -> int:
    raw = 이용요금표["상수도"].get(업종)
    table = 조정된_요율표(업종, raw, 주기 = 주기, 세대수 = 세대수)
    이용 = 이용요금계산(table, 사용량)
    이용 = rounddown_10(이용)
    
    return 이용

def 하수도요금(업종: str, 사용량: int, 세대수: int=1,주기: str="격월") -> int:
    raw = 이용요금표["하수도"].get(업종)
    table = 조정된_요율표(업종, raw, 주기 = 주기, 세대수 = 세대수)
    이용 = 이용요금계산(table, 사용량)
    이용 = rounddown_10(이용)
    
    return 이용

def 복지감면계산(주기: str="격월", 감면세대수: int=0) -> dict:
    if 감면세대수 <=0:
        return {"상수도감면": 0, "하수도감면": 0, "부담금감면":0,"총감면":0}
    
    매월_격월 = 2 if 주기 == "격월" else 1
    상수도감면 = 4200 * 감면세대수 * 매월_격월
    하수도감면 = 2640 * 감면세대수 * 매월_격월
    부담금감면 = 1700 * 감면세대수 * 매월_격월
    복지총감면 = 상수도감면 + 하수도감면 + 부담금감면
    
    return {
        "상수도감면": 상수도감면,
        "하수도감면": 하수도감면,
        "부담금감면": 부담금감면,
        "복지총감면": 복지총감면
    }
    
def 물이용부담금계산(사용량: int) -> int:
    금액 = 물이용부담금_단가 * 사용량
    return 금액

def 겸업요금계산(사용량: int, 세대수: int=1,주기: str= "격월") -> dict:
    가정한도 = (30 if 주기 == "격월" else 15) * 세대수
    가정분 = min(사용량, 가정한도)
    일반분 = max(0, 사용량 - 가정분)
    
    가정요금_상수 = 상수도요금("겸업용", 가정분, 세대수, 주기=주기)
    일반요금_상수 = 상수도요금("일반용", 일반분, 세대수, 주기=주기)
    겸업_상수도합 = 가정요금_상수 + 일반요금_상수
    
    가정요금_하수 = 하수도요금("겸업용", 가정분, 주기=주기)
    일반요금_하수 = 하수도요금("일반용", 일반분, 주기=주기)
    겸업_하수도합 = 가정요금_하수 + 일반요금_하수
    
    return {
        "상수도_가정": 가정요금_상수,
        "상수도_일반": 일반요금_상수,
        "상수도_총합": 겸업_상수도합,
        "하수도_가정": 가정요금_하수,
        "하수도_일반": 일반요금_하수,
        "하수도_총합": 겸업_하수도합,
    }
    
def 직전평균요금계산(업종:str, 세대수:int=1, 주기: str = "격월", 하수도여부: bool=True, 겸업여부:bool=False, 직전사용량_1: int=0, 직전사용량_2: int=0) -> dict:
    평균사용량 = (직전사용량_1 + 직전사용량_2) // 2
    평균부담금 = 물이용부담금계산(사용량 = 평균사용량)
    
    if 겸업여부:
        겸업평균요금 = 겸업요금계산(사용량 = 평균사용량, 세대수 = 세대수, 주기 = 주기)
        return {
            "직전겸업상수도": 겸업평균요금["상수도_총합"],
            "직전겸업하수도": 겸업평균요금["하수도_총합"],
            "직전평균부담금": 평균부담금
        }
    else:
        평균상수도 = 상수도요금(업종 = 업종, 사용량 = 평균사용량, 세대수 = 세대수, 주기 = 주기)
        평균하수도 = 하수도요금(업종 = 업종, 사용량 = 평균사용량, 세대수 = 세대수, 주기 = 주기) if 하수도여부 else 0
        return {
            "직전평균상수도": 평균상수도,
            "직전평균하수도": 평균하수도,
            "직전평균부담금": 평균부담금
        }
def 총요금계산(업종: str, 사용량: int, 구경: int, 세대수:int=1, 하수도여부: bool=True, 겸업여부: bool=False, 주기: str = "격월", 감면세대수:int=0, 누수감면여부: bool=False, 직전사용량_1: int=0, 직전사용량_2: int=0) -> dict:
    정액료 = 기본요금(구경, 주기)
    물이용부담금 = 물이용부담금계산(사용량)
    복지감면 = 복지감면계산(주기, 감면세대수)
    상수도복지 = 복지감면["상수도감면"] * -1
    하수도복지 = 복지감면["하수도감면"] * -1
    부담금복지 = 복지감면["부담금감면"] * -1
    복지감면총액 = 상수도복지 + 하수도복지 + 부담금복지
    
    if 겸업여부:
        겸업 = 겸업요금계산(사용량, 세대수, 주기)
        겸업_가정_상수도 = 겸업["상수도_가정"]
        겸업_일반_상수도 = 겸업["상수도_일반"]
        겸업_상수도합 = 겸업_가정_상수도 + 겸업_일반_상수도
        
        겸업_가정_하수도 = 겸업["하수도_가정"] if 하수도여부 else 0
        겸업_일반_하수도 = 겸업["하수도_일반"] if 하수도여부 else 0
        겸업_하수도합 = 겸업_가정_하수도 + 겸업_일반_하수도
        
        겸업가정합 = 겸업_가정_상수도 + 겸업_가정_하수도
        겸업일반합 = 겸업_일반_상수도 + 겸업_일반_하수도
        겸업_총금액 = 정액료 + 물이용부담금 + 겸업_상수도합 + 겸업_하수도합
        
        if 누수감면여부:
            직전평균 = 직전평균요금계산(업종, 세대수, 주기, 하수도여부, 겸업여부, 직전사용량_1, 직전사용량_2)
            상수도평균금액 = 직전평균["직전겸업상수도"]
            하수도평균금액 = 직전평균["직전겸업하수도"] if 하수도여부 else 0
            부담금평균금액 = 직전평균["직전평균부담금"]
            
            상수도누수감면 = (rounddown_10((max(0, 겸업_상수도합 - 상수도평균금액)) // 2)* -1)
            
            하수도누수감면 = (rounddown_10(max(0, 겸업_하수도합 - 하수도평균금액)) * -1)
            
            부담금누수감면 = (rounddown_10(max(0, 물이용부담금 - 부담금평균금액)) // 2 )* -1
            
            누수감면총액 = 상수도누수감면 + 하수도누수감면 + 부담금누수감면
            # 위까지가 감면되는 금액 계산까지
            누수감면된상수도 = 겸업_상수도합 + 상수도누수감면
            누수감면된하수도 = 겸업_하수도합 + 하수도누수감면
            누수감면된부담금 = 물이용부담금 + 부담금누수감면
            # 여기까지 누수감면적용된 금액
            감면적용상수도 = max(0, 누수감면된상수도 + 상수도복지)
            감면적용하수도 = max(0, 누수감면된하수도 + 하수도복지)
            감면적용부담금 = max(0, 누수감면된부담금 + 부담금복지)
            합산_금액 = 정액료 + 감면적용상수도 + 감면적용하수도 + 감면적용부담금
            return {
                "정액료": 정액료,
                "겸업_가정_상수도" : 겸업_가정_상수도,
                "겸업_가정_하수도" : 겸업_가정_하수도,
                "겸업_가정_총합" : 겸업가정합,
                "겸업_일반_상수도" : 겸업_일반_상수도,
                "겸업_일반_하수도" : 겸업_일반_하수도,
                "겸업_일반_총합" : 겸업일반합,
                "겸업_상수도합": 겸업_상수도합,
                "겸업_하수도합": 겸업_하수도합,
                "물이용부담금": 물이용부담금,
                "총금액": 겸업_총금액,
                
                "직전평균상수도": 상수도평균금액,
                "직전평균하수도": 하수도평균금액,
                "직전평균부담금": 부담금평균금액,
            
                "상수도누수감면": 상수도누수감면,
                "하수도누수감면": 하수도누수감면,
                "부담금누수감면": 부담금누수감면,
                "누수감면총액": 누수감면총액,
            
                "상수도감면": 상수도복지,
                "하수도감면": 하수도복지,
                "부담금감면": 부담금복지,
                "총_복지감면": 복지감면총액,
            
                "상수도합산금액": 감면적용상수도,
                "하수도합산금액": 감면적용하수도,
                "부담금합산금액": 감면적용부담금,
            
                "합산_금액": 합산_금액
            }
        
        else:
            감면적용상수도 = max(0, 겸업_상수도합 + 상수도복지)
            감면적용하수도 = max(0, 겸업_하수도합 + 하수도복지)
            감면적용부담금 = max(0, 물이용부담금 + 부담금복지)
            합산_금액 = 정액료 + 감면적용상수도 + 감면적용하수도 + 감면적용부담금
            return {
                "정액료": 정액료,
                "겸업_가정_상수도" : 겸업_가정_상수도,
                "겸업_가정_하수도" : 겸업_가정_하수도,
                "겸업_가정_총합" : 겸업가정합,
                "겸업_일반_상수도" : 겸업_일반_상수도,
                "겸업_일반_하수도" : 겸업_일반_하수도,
                "겸업_일반_총합" : 겸업일반합,
                "겸업_상수도합": 겸업_상수도합,
                "겸업_하수도합": 겸업_하수도합,
                "물이용부담금": 물이용부담금,
                "총금액": 겸업_총금액, 
            
                "상수도감면": 상수도복지,
                "하수도감면": 하수도복지,
                "부담금감면": 부담금복지,
                "총_복지감면": 복지감면총액,
            
                "상수도합산금액": 감면적용상수도,
                "하수도합산금액": 감면적용하수도,
                "부담금합산금액": 감면적용부담금,
            
                "합산_금액": 합산_금액
            }
    else:
        상수도이용요금 = 상수도요금(업종, 사용량, 세대수, 주기)
        하수도이용요금 = 하수도요금(업종, 사용량, 세대수, 주기) if 하수도여부 else 0
        이용요금합계 = 상수도이용요금 + 하수도이용요금 + 물이용부담금
        기본총합계 = 정액료 + 이용요금합계
        if 누수감면여부:
            직전평균 = 직전평균요금계산(업종, 세대수, 주기, 하수도여부, 겸업여부, 직전사용량_1, 직전사용량_2)
            상수도평균금액 = 직전평균["직전평균상수도"]
            하수도평균금액 = 직전평균["직전평균하수도"] if 하수도여부 else 0
            부담금평균금액 = 직전평균["직전평균부담금"]
            
            상수도누수감면 = (rounddown_10(max(0, (상수도이용요금 - 상수도평균금액) // 2)) * -1)
            
            하수도누수감면 = (rounddown_10(max(0, 하수도이용요금 - 하수도평균금액)) * -1)
            
            부담금누수감면 = (rounddown_10(max(0, (물이용부담금 - 부담금평균금액) // 2)) * -1)
            
            누수감면총액 = 상수도누수감면 + 하수도누수감면 + 부담금누수감면
            # 위까지가 감면되는 금액 계산까지
            누수감면된상수도 = 상수도이용요금 + 상수도누수감면
            누수감면된하수도 = 하수도이용요금 + 하수도누수감면
            누수감면된부담금 = 물이용부담금 + 부담금누수감면
            # 여기까지 누수감면적용된 금액
            감면적용상수도 = max(0, 누수감면된상수도 + 상수도복지)
            감면적용하수도 = max(0, 누수감면된하수도 + 하수도복지)
            감면적용부담금 = max(0, 누수감면된부담금 + 부담금복지)
            합산_금액 = 정액료 + 감면적용상수도 + 감면적용하수도 + 감면적용부담금
            return {
                "정액료": 정액료,
                "상수도이용요금": 상수도이용요금,
                "하수도이용요금": 하수도이용요금,
                "물이용부담금": 물이용부담금,
                "이용요금합계": 이용요금합계,
                "기본총합계": 기본총합계,
                # 원래금액
                
                "상수도누수감면": 상수도누수감면,
                "하수도누수감면": 하수도누수감면,
                "부담금누수감면": 부담금누수감면,
                "누수감면총금액": 누수감면총액,
                #누수감면 받는 금액
                
                "복지감면상수도": 상수도복지,
                "복지감면하수도": 하수도복지,
                "복지감면부담금": 부담금복지,
                "복지감면총합계": 복지감면총액,
                #기초수급,다자녀 등등 복지감면
                
                "상수도합산금액": 감면적용상수도,
                "하수도합산금액": 감면적용하수도,
                "부담금합산금액": 감면적용부담금,
                
                "총합산금액": 합산_금액
            }
            
        else:
            감면적용상수도 = max(0, 상수도이용요금 + 상수도복지)
            감면적용하수도 = max(0, 하수도이용요금 + 하수도복지)
            감면적용부담금 = max(0, 물이용부담금 + 부담금복지)
            합산_금액 = 정액료 + 감면적용상수도 + 감면적용하수도 + 감면적용부담금
            return {
                "정액료": 정액료,
                "상수도이용요금": 상수도이용요금,
                "하수도이용요금": 하수도이용요금,
                "물이용부담금": 물이용부담금,
                "이용요금합계": 이용요금합계,
                "기본총합계": 기본총합계,
                # 원래금액
                "복지감면상수도": 상수도복지,
                "복지감면하수도": 하수도복지,
                "복지감면부담금": 부담금복지,
                "복지감면총합계": 복지감면총액,
                #기초수급,다자녀 등등 복지감면
                "상수도합산금액": 감면적용상수도,
                "하수도합산금액": 감면적용하수도,
                "부담금합산금액": 감면적용부담금,
                
                "총합산금액": 합산_금액
            }
            
def 요금분배_아파트(각가정: dict , 실세대수: int , **kwargs) -> dict:
    매변 = kwargs
    
    아파트정보 = 총요금계산(**kwargs)
    
    분할기본료 = 아파트정보["정액료"] / 실세대수
    
    결과 = {}
    for 호명칭, 개인사용량 in 각가정.items():
        기본요금 = 분할기본료
        호별상수도계산 = 상수도요금(업종 = 매변["업종"], 사용량 = 개인사용량, 세대수 = 1, 주기 = 매변["주기"])
        호별하수도계산 = 하수도요금(업종 = 매변["업종"], 사용량 = 개인사용량, 세대수 = 1, 주기 = 매변["주기"])
        호별부담금계산 = 물이용부담금계산(사용량 = 개인사용량)
        합산금액계산 = 기본요금 + 호별상수도계산 + 호별하수도계산 + 호별부담금계산
        
        결과[호명칭] = {
            "기본료" : 기본요금,
            "상수도요금": 호별상수도계산,
            "하수도요금": 호별하수도계산,
            "물이용부담금": 호별부담금계산,
            "합산된_금액": 합산금액계산
        }
    return 결과


# ----------------------------
# 위에서 정의한 함수/데이터 (이용요금표, 기본요금표, 함수들...)
# ----------------------------

st.title("김천시 상하수도 요금 계산기 💧")

# --- 입력 영역 ---
st.header("📌 기본 입력값")
업종 = st.selectbox("업종 선택", list(이용요금표["상수도"].keys()))
구경 = st.selectbox("계량기 구경(mm)", list(기본요금표.keys()))
세대수 = st.number_input("세대수", min_value=1, step=1, value=1)
사용량 = st.number_input("총 사용량 (㎥)", min_value=0, step=1)

하수도여부 = st.checkbox("하수도 여부", value=True)
겸업여부 = st.checkbox("겸업 여부", value=False)
주기 = st.selectbox("검침 주기", ["매월", "격월"], index=1)
감면세대수 = st.number_input("복지 감면 세대수", min_value=0, step=1, value=0)
누수감면여부 = st.checkbox("누수 감면 여부", value=False)

직전사용량_1 = st.number_input("직전 사용량 1", min_value=0, step=1, value=0)
직전사용량_2 = st.number_input("직전 사용량 2", min_value=0, step=1, value=0)

# --- 버튼: 총요금계산 ---
if st.button("총 요금 계산하기"):
    결과 = 총요금계산(
        업종=업종,
        사용량=사용량,
        구경=구경,
        세대수=세대수,
        하수도여부=하수도여부,
        겸업여부=겸업여부,
        주기=주기,
        감면세대수=감면세대수,
        누수감면여부=누수감면여부,
        직전사용량_1=직전사용량_1,
        직전사용량_2=직전사용량_2
    )

    st.subheader("💡 총 요금 결과")
    for key, value in 결과.items():
        st.write(f"**{key}**: {value:,} 원")

# --- 아파트 분배 입력 ---
st.header("🏢 아파트 세대별 분배")
실세대수 = st.number_input("실 거주 세대수", min_value=1, step=1, value=세대수)

# 세대별 사용량 입력 (예: {"101호": 15, "102호": 20})
st.markdown("세대별 사용량을 입력하세요 (예시: 101호=15)")
입력_텍스트 = st.text_area("세대별 사용량 (형식: 호명칭=사용량, 줄바꿈으로 구분)")

if st.button("분배 계산하기"):
    각가정 = {}
    if 입력_텍스트.strip():
        for line in 입력_텍스트.splitlines():
            try:
                호, 값 = line.split("=")
                각가정[호.strip()] = int(값.strip())
            except:
                st.warning(f"입력 오류: {line} 은(는) 무시됨")

    if 각가정:
        결과 = 요금분배_아파트(각가정, 실세대수,
                          업종=업종,
                          사용량=사용량,
                          구경=구경,
                          세대수=세대수,
                          하수도여부=하수도여부,
                          겸업여부=겸업여부,
                          주기=주기,
                          감면세대수=감면세대수,
                          누수감면여부=누수감면여부,
                          직전사용량_1=직전사용량_1,
                          직전사용량_2=직전사용량_2)

        st.subheader("📊 세대별 분배 결과")
        for 호, res in 결과.items():
            st.write(f"### {호}")
            for key, value in res.items():
                st.write(f"- {key}: {value:,} 원")